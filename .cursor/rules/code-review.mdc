---
description: 
globs: 
alwaysApply: false
---
# AI Chat App コードレビューガイドライン

## アーキテクチャとディレクトリ構造
- `src/` - アプリケーションのコアロジック
- `components/` - 再利用可能なVueコンポーネント
- `pages/` - ルーティング用のページコンポーネント
- `server/` - バックエンドAPIエンドポイント
- `plugins/` - Nuxt.jsプラグイン
- `constants/` - 定数定義
- `public/` - 静的アセット

## コーディング規約
1. コンポーネント命名規則
   - PascalCaseを使用（例：`ChatMessage.vue`）
   - コンポーネントファイルは単数形
   - ディレクトリは複数形

2. TypeScript
   - 型定義を必ず行う
   - `any`型の使用は避ける
   - インターフェースは`I`プレフィックスを使用（例：`IChatMessage`）
   - `console.log`を入れないこと

3. Vue.js
   - Composition APIを使用
   - コンポーネントは単一責任の原則に従う
   - Propsは型定義を必須とする

4. スタイリング
   - Tailwind CSSのユーティリティクラスを優先
   - カスタムCSSは`<style scoped>`を使用
   - グローバルスタイルは`assets/`に配置

### 全体

## セキュリティ
- 環境変数は`.env`で管理
- APIキーはサーバーサイドでのみ使用
- ユーザー入力は必ずバリデーション

## パフォーマンス
- 画像は最適化して使用
- コンポーネントは必要に応じて遅延ロード
- バンドルサイズの最適化

## テスト
- ユニットテストは`__tests__`ディレクトリに配置
- コンポーネントテストは`__tests__/components`に配置
- E2Eテストは`__tests__/e2e`に配置

## ドキュメント
- 複雑なロジックにはコメントを追加
- READMEは最新の状態に保つ
- APIエンドポイントはOpenAPI/Swaggerで文書化

## レビューチェックリスト
- [ ] コードはコーディング規約に準拠しているか
- [ ] 型定義は適切か
- [ ] エラーハンドリングは適切か
- [ ] パフォーマンスへの影響は考慮されているか
- [ ] セキュリティリスクはないか
- [ ] テストは適切に書かれているか
- [ ] ドキュメントは更新されているか